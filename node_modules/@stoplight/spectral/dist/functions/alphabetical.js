"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("../utils");
const compare = (a, b) => {
    if ((typeof a === 'number' || Number.isNaN(Number(a))) && (typeof b === 'number' || !Number.isNaN(Number(b)))) {
        return Math.min(1, Math.max(-1, Number(a) - Number(b)));
    }
    if (typeof a !== 'string' || typeof b !== 'string') {
        return 0;
    }
    return a.localeCompare(b);
};
const getUnsortedItems = (arr, compareFn) => {
    for (let i = 0; i < arr.length - 1; i += 1) {
        if (compareFn(arr[i], arr[i + 1]) >= 1) {
            return [i, i + 1];
        }
    }
    return null;
};
exports.alphabetical = (targetVal, opts, paths) => {
    const results = [];
    if (!utils_1.isObject(targetVal)) {
        return results;
    }
    const targetArray = Array.isArray(targetVal) ? targetVal : Object.keys(targetVal);
    if (targetArray.length < 2) {
        return results;
    }
    const { keyedBy } = opts;
    const unsortedItems = getUnsortedItems(targetArray, keyedBy
        ? (a, b) => {
            if (!utils_1.isObject(a) || !utils_1.isObject(b))
                return 0;
            return compare(a[keyedBy], b[keyedBy]);
        }
        :
            compare);
    if (unsortedItems != null) {
        const path = paths.target || paths.given;
        results.push(Object.assign(Object.assign({}, (!keyedBy && { path: [...path, Array.isArray(targetVal) ? unsortedItems[0] : targetArray[unsortedItems[0]]] })), { message: keyedBy
                ? 'properties are not in alphabetical order'
                : `at least 2 properties are not in alphabetical order: "${targetArray[unsortedItems[0]]}" should be placed after "${targetArray[unsortedItems[1]]}"` }));
    }
    return results;
};
//# sourceMappingURL=alphabetical.js.map
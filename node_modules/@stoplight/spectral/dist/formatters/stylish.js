"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = require("chalk");
const strip_ansi_1 = require("strip-ansi");
const table = require("text-table");
const types_1 = require("@stoplight/types");
const getHighestSeverity_1 = require("./utils/getHighestSeverity");
const groupBySeverity_1 = require("./utils/groupBySeverity");
const groupBySource_1 = require("./utils/groupBySource");
const sortResults_1 = require("./utils/sortResults");
function pluralize(word, count) {
    return count === 1 ? word : `${word}s`;
}
function formatRange(range) {
    if (!range)
        return '';
    return ` ${range.start.line + 1}:${range.start.character + 1}`;
}
const SEVERITY_COLORS = {
    [types_1.DiagnosticSeverity.Error]: 'red',
    [types_1.DiagnosticSeverity.Warning]: 'yellow',
    [types_1.DiagnosticSeverity.Information]: 'blue',
    [types_1.DiagnosticSeverity.Hint]: 'white',
};
function getColorForSeverity(severity) {
    return SEVERITY_COLORS[severity];
}
function getMessageType(severity) {
    const color = getColorForSeverity(severity);
    switch (severity) {
        case types_1.DiagnosticSeverity.Error:
            return chalk_1.default[color]('error');
        case types_1.DiagnosticSeverity.Warning:
            return chalk_1.default[color]('warning');
        case types_1.DiagnosticSeverity.Information:
            return chalk_1.default[color]('information');
        default:
            return chalk_1.default[color]('hint');
    }
}
exports.stylish = results => {
    let output = '\n';
    let errorCount = 0;
    let warningCount = 0;
    let infoCount = 0;
    let hintCount = 0;
    const summaryColor = getColorForSeverity(getHighestSeverity_1.getHighestSeverity(results));
    const groupedResults = groupBySource_1.groupBySource(results);
    Object.keys(groupedResults).map((path, index) => {
        const pathResults = groupedResults[path];
        const { [types_1.DiagnosticSeverity.Error]: errors, [types_1.DiagnosticSeverity.Warning]: warnings, [types_1.DiagnosticSeverity.Information]: infos, [types_1.DiagnosticSeverity.Hint]: hints, } = groupBySeverity_1.groupBySeverity(pathResults);
        errorCount += errors.length;
        warningCount += warnings.length;
        infoCount += infos.length;
        hintCount += hints.length;
        output += `${chalk_1.default.underline(path)}\n`;
        const pathTableData = sortResults_1.sortResults(pathResults).map((result) => [
            formatRange(result.range),
            getMessageType(result.severity),
            result.code !== undefined ? result.code : '',
            result.message,
        ]);
        output += `${table(pathTableData, {
            align: ['c', 'r', 'l'],
            stringLength(str) {
                return strip_ansi_1.default(str).length;
            },
        })
            .split('\n')
            .map((el) => el.replace(/(\d+)\s+(\d+)/u, (m, p1, p2) => chalk_1.default.dim(`${p1}:${p2}`)))
            .join('\n')}\n\n`;
    });
    const total = errorCount + warningCount + infoCount + hintCount;
    if (total > 0) {
        output += chalk_1.default[summaryColor].bold([
            '\u2716 ',
            total,
            pluralize(' problem', total),
            ' (',
            errorCount,
            pluralize(' error', errorCount),
            ', ',
            warningCount,
            pluralize(' warning', warningCount),
            ', ',
            infoCount,
            pluralize(' info', infoCount),
            ', ',
            hintCount,
            pluralize(' hint', hintCount),
            ')\n',
        ].join(''));
    }
    return total > 0 ? output : '';
};
//# sourceMappingURL=stylish.js.map
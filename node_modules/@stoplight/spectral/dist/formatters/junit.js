"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const json_1 = require("@stoplight/json");
const path_1 = require("@stoplight/path");
const types_1 = require("@stoplight/types");
const lodash_1 = require("lodash");
const groupBySource_1 = require("./utils/groupBySource");
const xmlEscape_1 = require("./utils/xmlEscape");
function stringifyPath(path) {
    return ['#', ...path.map(json_1.encodePointerFragment)].join('/');
}
exports.junit = results => {
    let output = '';
    output += '<?xml version="1.0" encoding="utf-8"?>\n';
    output += '<testsuites>\n';
    const groupedResults = groupBySource_1.groupBySource(results);
    for (const [source, validationResults] of Object.entries(groupedResults)) {
        const classname = source.replace(new RegExp(`${lodash_1.escapeRegExp(path_1.extname(source))}$`), '');
        if (validationResults.length > 0) {
            const filteredValidationResults = validationResults.filter(result => result.severity === types_1.DiagnosticSeverity.Error);
            output += `<testsuite package="org.spectral" time="0" tests="${filteredValidationResults.length}" errors="0" failures="${filteredValidationResults.length}" name="${source}">\n`;
            for (const result of filteredValidationResults) {
                output += `<testcase time="0" name="org.spectral.${result.code || 'unknown'}" classname="${classname}">`;
                output += `<failure message="${xmlEscape_1.xmlEscape(result.message)}">`;
                output += '<![CDATA[';
                output += `line ${result.range.start.line + 1}, col ${result.range.start.character + 1}, `;
                output += `${xmlEscape_1.xmlEscape(result.message)} (${result.code}) `;
                output += `at path ${xmlEscape_1.xmlEscape(stringifyPath(result.path))}`;
                output += ']]>';
                output += `</failure>`;
                output += '</testcase>\n';
            }
            output += '</testsuite>\n';
        }
        else {
            output += `<testsuite package="org.spectral" time="0" tests="1" errors="0" name="${source}">\n`;
            output += `<testcase time="0" name="${source}" classname="${classname}" />\n`;
            output += '</testsuite>\n';
        }
    }
    output += '</testsuites>\n';
    return output;
};
//# sourceMappingURL=junit.js.map
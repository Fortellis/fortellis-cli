"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const path_1 = require("@stoplight/path");
const abort_controller_1 = require("abort-controller");
const fs = require("fs");
const request_1 = require("../request");
function readFile(name, opts) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        if (path_1.isURL(name)) {
            let response;
            let timeout = null;
            try {
                if (opts.timeout) {
                    const controller = new abort_controller_1.default();
                    timeout = setTimeout(() => {
                        controller.abort();
                    }, opts.timeout);
                    response = yield request_1.default(name, { signal: controller.signal });
                }
                else {
                    response = yield request_1.default(name);
                }
                if (!response.ok)
                    throw new Error(response.statusText);
                return yield response.text();
            }
            catch (ex) {
                if (ex.name === 'AbortError') {
                    throw new Error('Timeout');
                }
                else {
                    throw ex;
                }
            }
            finally {
                if (timeout !== null) {
                    clearTimeout(timeout);
                }
            }
        }
        else {
            try {
                return yield new Promise((resolve, reject) => {
                    fs.readFile(name, opts.encoding, (err, data) => {
                        if (err !== null) {
                            reject(err);
                        }
                        else {
                            resolve(data);
                        }
                    });
                });
            }
            catch (ex) {
                throw new Error(`Could not read ${name}: ${ex.message}`);
            }
        }
    });
}
exports.readFile = readFile;
function readParsable(name, opts) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        try {
            return yield readFile(name, opts);
        }
        catch (ex) {
            throw new Error(`Could not parse ${name}: ${ex.message}`);
        }
    });
}
exports.readParsable = readParsable;
//# sourceMappingURL=reader.js.map
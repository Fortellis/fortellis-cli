import { IResolveError } from '@stoplight/json-ref-resolver/types';
import { Dictionary, ILocation, JsonPath } from '@stoplight/types';
import { IParseMap, ResolveResult } from './spectral';
import { IParsedResult } from './types';
export declare class Resolved {
    spec: IParsedResult;
    parsedMap: IParseMap;
    readonly refMap: Dictionary<string>;
    readonly resolved: unknown;
    readonly unresolved: unknown;
    readonly errors: IResolveError[];
    formats?: string[] | null;
    constructor(spec: IParsedResult, resolveResult: ResolveResult, parsedMap: IParseMap);
    doesBelongToDoc(path: JsonPath): boolean;
    getParsedForJsonPath(path: JsonPath): {
        path: any[];
        doc: IParsedResult<import("@stoplight/types").IParserResult<unknown, any, any, any>>;
    } | null;
    getLocationForJsonPath(path: JsonPath, closest?: boolean): ILocation;
    getValueForJsonPath(path: JsonPath): unknown;
}

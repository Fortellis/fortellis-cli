"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai = require("chai");
var src_1 = require("../src");
var expect = chai.expect;
suite('Dumper', function () {
    suite('lineWidth dump option', function () {
        test('should respect lineWidth for multi-line strings', function () {
            var description = "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae\nNeque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et.";
            expect(src_1.safeDump({ description: description }, { lineWidth: 100 })).to.equal("description: >-\n  Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium,\n  totam rem aperiam, eaque ipsa quae\n\n  Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed\n  quia non numquam eius modi tempora incidunt ut labore et.\n");
        });
        test('should use literal block-scalar style if lineWidth is Infinity (or very lengthy)', function () {
            var description = "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae\nNeque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et.";
            expect(src_1.safeDump({ description: description }, { lineWidth: Infinity })).to.equal("description: |-\n  Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae\n  Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et.\n");
        });
    });
    suite('noRefs dump option', function () {
        test('should not use anchors for same objects by default', function () {
            var obj = { foo: 'bar' };
            expect(src_1.safeDump({ a: obj, b: obj })).to.equal("a: &ref_0\n  foo: bar\nb: *ref_0\n");
        });
        test('should not use anchors for same objects if falsy', function () {
            var obj = { foo: 'bar' };
            expect(src_1.safeDump({ a: obj, b: obj }, { noRefs: true })).to.equal("a:\n  foo: bar\nb:\n  foo: bar\n");
        });
    });
});
//# sourceMappingURL=dumper.test.js.map
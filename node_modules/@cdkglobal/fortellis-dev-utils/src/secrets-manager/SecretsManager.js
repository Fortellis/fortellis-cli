const { logService: logger } = require('../index');
const aws = require('aws-sdk');

class SecretsManager {
  constructor() {
    this.client = new aws.SecretsManager();
  }

  result(params, resolve, reject, context = 'unknown') {
    return (err, data) => {
      let secret;
      if (err) {
        logger.info({
          message: 'Secret read failed',
          error: err,
          params,
          operation: context
        });
        reject(err);
      } else {
        logger.info({ message: 'Secret read succeeded', operation: context });
        // Decrypts secret using the associated KMS CMK.
        // Depending on whether the secret is a string or binary, one of these fields will be populated.
        if ('SecretString' in data) {
          secret = data.SecretString;
        } else {
          let buff = new Buffer(data.SecretBinary, 'base64');
          secret = buff.toString('ascii');
        }
        resolve(secret);
      }
    };
  }

  getSecretValue(params = {}) {
    return new Promise((resolve, reject) => {
      this.client.getSecretValue(
        params,
        this.result(params, resolve, reject, 'GetSecretValue')
      );
    });
  }
}

module.exports = new SecretsManager();

const { Exception } = require('../../src/error-handling/Exception');

describe('src/error-handling/Exception', () => {
  describe('Exception', () => {
    it('should be instantiatable', () => {
      let exception = new Exception({});
      expect(exception).toBeDefined;
    });
    it('instance should have instantiated properties ', () => {
      const err = {
        message: 'Unable to do something',
        error: '404 from Okta',
        user: { uid: 'useruid', username: 'test@fortellis.io' },
        admin: { uid: 'adminuid', username: 'admin@fortellis.io' },
        function: 'OktaRepo.getUserId',
        inputArgs: [{ uid: 'testUID' }]
      };
      let exception = new Exception(err);
      expect(exception.message).toEqual(err.message);
      expect(exception.error).toEqual(err.error);
      expect(exception.user).toEqual(err.user);
      expect(exception.admin).toEqual(err.admin);
    });
    it('instance should have any additional instantiated properties under additionalInfo property', () => {
      const err = {
        message: 'Unable to do something',
        error: '404 from Okta',
        function: 'OktaRepo.getUserId',
        inputArgs: [{ uid: 'testUID' }]
      };
      let exception = new Exception(err);
      expect(exception.additionalInfo.function).toEqual(err.function);
      expect(exception.additionalInfo.inputArgs).toEqual(err.inputArgs);
    });
    it('instance should default error property to "Error detail not available" is not provided during instantiation', () => {
      let exception = new Exception({});
      expect(exception.error).toEqual('Error detail not available');
    });
  });
});

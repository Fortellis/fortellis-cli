const ResponseHandler = require('../../src/http-request-response-helpers/ResponseAsyncHandler');

describe('src/http-request-response-helpers/ResponseAsyncHandler', () => {
  describe('asyncResponseHandler api', () => {
    test('should be defined', () => {
      expect(ResponseHandler.asyncResponseHandler).toBeDefined;
    });

    test('should invoke response handler with the response, httpCode from the input async function resolved value', async () => {
      const resMock = {
        json: jest.fn(),
        status: jest.fn(),
        type: jest.fn()
      };
      const asyncResponse = {
        httpCode: 200,
        message: 'Operation Successful'
      };
      const { httpCode, ...body } = asyncResponse;
      const asynFunction = async function() {
        return Promise.resolve(asyncResponse);
      };
      const wrappedFunction = ResponseHandler.asyncResponseHandler(
        asynFunction
      );
      await wrappedFunction({}, resMock);
      expect(resMock.status.mock.calls[0][0]).toBe(httpCode);
      expect(resMock.type.mock.calls[0][0]).toBe('application/json');
      expect(resMock.json.mock.calls[0][0]).toEqual(body);
    });
  });
});

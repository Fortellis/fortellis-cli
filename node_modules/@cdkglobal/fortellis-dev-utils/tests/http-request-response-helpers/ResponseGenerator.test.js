const ResponseGenerator = require('../../src/http-request-response-helpers/ResponseGenerator');

describe('src/http-request-response-helpers/ResponseGenerator', () => {
  describe('getError api', () => {
    test('should be defined', () => {
      expect(ResponseGenerator.getError).toBeDefined;
    });

    test('should return error object with input code, errMsg and status ', () => {
      const input = {
        code: 500,
        errorMessage: 'something went wrong',
        status: 'FAILED'
      };
      const res = ResponseGenerator.getError(input);
      expect(res.code).toBe(input.code);
      expect(res.status).toBe(input.status);
      expect(res.errors[0].message).toBe(input.errorMessage);
    });

    test('should return error object with default input code, errMsg and status ', () => {
      const res = ResponseGenerator.getError();
      expect(res.code).toBe(500);
      expect(res.status).toBe('FAILED');
      expect(res.errors[0].message).toBe('No Error Message Available');
    });
  });

  describe('getResponse api', () => {
    test('should be defined', () => {
      expect(ResponseGenerator.getResponse).toBeDefined;
    });

    test('should return response object with input code, payload and status ', () => {
      const input = {
        code: 201,
        payload: {},
        status: 'SUCCESS'
      };
      const res = ResponseGenerator.getResponse(input);
      expect(res.code).toBe(input.code);
      expect(res.status).toBe(input.status);
      expect(res.payload).toBe(input.payload);
    });

    test('should return response object with default code, payload and status ', () => {
      const res = ResponseGenerator.getResponse();
      expect(res.code).toBe(200);
      expect(res.status).toBe('SUCCESS');
      expect(res.payload).toEqual({});
    });
  });
});

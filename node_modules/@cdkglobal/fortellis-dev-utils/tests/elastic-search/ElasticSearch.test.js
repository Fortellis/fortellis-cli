jest.mock('elasticsearch');
const es = require('elasticsearch');
const response = {
  hits: {
    max_score: 1.38,
    total: 1,
    hits: [
      {
        _id: 'id',
        _index: 'test',
        _score: 1.38,
        _source: {
          id: 'id',
          name: 'Test',
          phone: '123456789'
        }
      }
    ]
  }
};
const mockSearch = jest.fn().mockResolvedValue(response);
es.Client.mockReturnValue({ search: mockSearch });
const ElasticSearch = require('../../src/elastic-search/ElasticSearch');
const elasticSearch = new ElasticSearch(
  'https://ElasticSearchBareDomain.com',
  'us-west-2'
);

const index = 'test';
const errorMsg = 'Failed';
let payload = {
  size: 200,
  query: {
    query_string: {
      default_field: 'name',
      query: '*test*'
    }
  }
};

describe('src/elastic-search/ElasticSearch', function() {
  test('Should be defined', () => {
    expect(elasticSearch.search).toBeDefined();
  });

  test('Should throw an error', async () => {
    const es1 = require('elasticsearch');
    const mockSearchReject = jest.fn().mockRejectedValue({ message: 'Error' });
    es1.Client.mockReturnValue({ search: mockSearchReject });
    const ElasticSearch1 = require('../../src/elastic-search/ElasticSearch');
    const elasticSearch1 = new ElasticSearch1(
      'https://ElasticSearchBareDomain.com',
      'us-west-2'
    );
    try {
      await elasticSearch1.search({
        index,
        payload,
        errorMsg
      });
    } catch (error) {
      expect(error.message).toEqual('Error');
    }
  });

  test('should resolve the elastic search object when the given search exists', async () => {
    const searchResultsObj = await elasticSearch.search({
      index,
      payload,
      errorMsg
    });
    expect(searchResultsObj).toEqual(response);
  });
});
